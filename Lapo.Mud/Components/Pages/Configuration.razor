@page "/config"
@using Lapo.Mud.Dialogs
@using Lapo.Mud.Enums
@using Lapo.Mud.Services
@using MudBlazor

<PageTitle>Configuration</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Configuration</MudText>

<MudButton OnClick="OpenAddItemDialog" StartIcon="@Icons.Material.Outlined.Add" Color="Color.Success" Class="mb-2">Add Item</MudButton>

<MudDataGrid Items="@_items" Dense="true" Hover="true" MultiSelection="false">
    <Columns>
        <PropertyColumn Property="x => x.Table" Title="Table" />
        <PropertyColumn Property="x => x.Where" Title="Where" />
        @* <PropertyColumn Property="x => x.Top" Title="Top" /> *@
        @* <PropertyColumn Property="x => x.Direction" Title="Direction" /> *@
        <TemplateColumn>
            <CellTemplate Context="context">
                <MudButton OnClick="@(() => RemoveItem(context.Item))" StartIcon="@Icons.Material.Outlined.Delete" Color="Color.Error" Variant="Variant.Text">Remove</MudButton>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    public class TableConfig
    {
        public string Table { get; set; } = string.Empty;
        public string Where { get; set; } = string.Empty;
        public int Top { get; set; } = 100;
        public OrderByDirection Direction { get; set; } = OrderByDirection.Desc;
    }

    [Inject] ConfigurationService ConfigurationService { get; set; } = null!;
    [Inject] IDialogService DialogService { get; set; } = null!;

    List<TableConfig> _items = new();

    protected override async Task OnInitializedAsync()
    {
        _items = await ConfigurationService.ReadAsync<List<TableConfig>>("Tables") ?? new();
    }

    async Task OpenAddItemDialog()
    {
        var parameters = new DialogParameters { ["Config"] = new TableConfig() };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialog = await DialogService.ShowAsync<TableConfigDialog>("Add Table Config", parameters, options);
        var result = await dialog.Result;

        if (result is { Canceled: false, Data: TableConfig newItem })
        {
            _items.Add(newItem);
            await ConfigurationService.UpsertAsync("Tables", _items);
        }
    }

    async Task RemoveItem(TableConfig item)
    {
        _items.Remove(item);
        await ConfigurationService.UpsertAsync("Tables", _items);
    }
}



