@page "/"
@using System.Data
@using Lapo.Services

<PageTitle>Home</PageTitle>

<MudButton @onclick="ScanAsync">Scan</MudButton>

@code
{
    [Inject] ConfigurationService ConfigurationService { get; set; } = null!;
    [Inject] CsvService CsvService { get; set; } = null!;
    [Inject] DatabaseService DatabaseService { get; set; } = null!;

    readonly Dictionary<string, DataTable> _scan = new();
    Dictionary<string, DataTable> _prevScan = new();

    protected override Task OnInitializedAsync() => ScanAsync();

    async Task ScanAsync()
    {
        _scan.Clear();

        var tables = await ConfigurationService.ReadAsync<List<string>>("Tables") ?? [];
        foreach (var table in tables)
        {
            var rows = await DatabaseService.QueryAsync(table);
            _scan.Add(table, rows);
        }

        if (!_prevScan.Any())
        {
            _prevScan = new(_scan);
            return;
        }

        var diffResult = LoadDiff();
        var mergedData = Merge(diffResult);

        CsvService.Write(mergedData);

         _prevScan = new(_scan);
    }

(Dictionary<string, List<dynamic>> Added, Dictionary<string, List<dynamic>> Removed, Dictionary<string, List<dynamic>> Updated) LoadDiff()
{
    var addedRows = new Dictionary<string, List<DataTable>>();
    var removedRows = new Dictionary<string, List<DataTable>>();
    var updatedRows = new Dictionary<string, List<DataTable>>();

    foreach (var table in _prevScan.Keys)
    {
        if (!_scan.ContainsKey(table)) continue;

        var prevRows = _prevScan[table];
        var currentRows = _scan[table];

        var prevDict = prevRows.ToDictionary(row => row.Id);
        var currentDict = currentRows.ToDictionary(row => row.Id);

        // Righe aggiunte
        var added = currentRows.Where(row => !prevDict.ContainsKey(row.Id)).ToList();
        foreach (var row in added) AddOperation(row, table, "ADDED");
        
        if (added.Any()) addedRows[table] = added;

        // Righe rimosse
        var removed = prevRows.Where(row => !currentDict.ContainsKey(row.Id)).ToList();
        foreach (var row in removed) AddOperation(row, table, "DELETED");
        
        if (removed.Any()) removedRows[table] = removed;

        // Righe modificate
        var updated = new List<dynamic>();

        foreach (var row in currentRows)
        {
            if (!prevDict.TryGetValue(row.Id, out dynamic oldRow)) continue;

            var oldRowDict = (IDictionary<string, object>)oldRow;
            var newRowDict = (IDictionary<string, object>)row;

            var isDifferent = oldRowDict.Keys.Any(key => !newRowDict.ContainsKey(key) || !Equals(oldRowDict[key], newRowDict[key]));

            if (!isDifferent) continue;
            
            AddOperation(oldRow, table, "UPDATED OLD");
            AddOperation(row, table, "UPDATED NEW");

            updated.Add(oldRow);
            updated.Add(row);
        }

        if (updated.Any()) updatedRows[table] = updated;
    }

    return (addedRows, removedRows, updatedRows);
}

    static List<dynamic> Merge((Dictionary<string, List<dynamic>> Added, Dictionary<string, List<dynamic>> Removed, Dictionary<string, List<dynamic>> Updated) elements)
    {
        var mergedList = new List<dynamic>();

        foreach (var table in elements.Added.Keys) mergedList.AddRange(elements.Added[table]);

        foreach (var table in elements.Removed.Keys) mergedList.AddRange(elements.Removed[table]);

        foreach (var table in elements.Updated.Keys) mergedList.AddRange(elements.Updated[table]);

        return mergedList
            .OrderBy(row => row.TableName)
            .ThenBy(row => row.Id)
            .ToList();
    }

    static void AddOperation(dynamic row, string tableName, string operation)
    {
        var expando = (IDictionary<string, object>)row;
        expando["TableName"] = tableName;
        expando["Operation"] = operation;
    }
}
