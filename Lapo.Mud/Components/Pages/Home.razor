@page "/"
@using System.Data
@using Lapo.Services

<PageTitle>Home</PageTitle>

<MudButton @onclick="ScanAsync">Scan</MudButton>

@code
{
    [Inject] ConfigurationService ConfigurationService { get; set; } = null!;
    [Inject] CsvService CsvService { get; set; } = null!;
    [Inject] DatabaseService DatabaseService { get; set; } = null!;

    readonly Dictionary<string, DataTable> _lastScan = new();
    Dictionary<string, DataTable> _previousScan = new();

    protected override Task OnInitializedAsync() => ScanAsync();

    async Task ScanAsync()
    {
        _lastScan.Clear();

        var tables = await ConfigurationService.ReadAsync<List<string>>("Tables") ?? [];
        foreach (var table in tables)
        {
            var rows = await DatabaseService.QueryAsync(table);
            _lastScan.Add(table, rows);
        }

        if (!_previousScan.Any())
        {
            _previousScan = new(_lastScan);
            return;
        }

        var diffResult = LoadDiff(_previousScan, _lastScan);
        CsvService.Write(diffResult);

        _previousScan = new(_lastScan);
    }

    static Dictionary<string, List<DataRow>> LoadDiff(Dictionary<string, DataTable> previousScan, Dictionary<string, DataTable> lastScan)
    {
        var diff = new Dictionary<string, List<DataRow>>();

        foreach (var table in lastScan.Keys)
        {
            diff[table] = [];

            if (!previousScan.TryGetValue(table, out var previous)) continue;

            previous.Columns.Add("Operation", typeof(string));
            previous.Columns["Operation"]?.SetOrdinal(0);

            var last = lastScan[table];
            last.Columns.Add("Operation", typeof(string));
            last.Columns["Operation"]?.SetOrdinal(0);

            var previousRows = previous.AsEnumerable().ToList();
            var lastRows = last.AsEnumerable().ToList();

            var previousDict = previousRows.ToDictionary(row => row["Id"]);
            var lastDict = lastRows.ToDictionary(row => row["Id"]);

            var added = lastRows.Where(row => !previousDict.ContainsKey(row["Id"])).ToList();
            foreach (var row in added) row["Operation"] = "ADDED";

            var removed = previousRows.Where(row => !lastDict.ContainsKey(row["Id"])).ToList();
            foreach (var row in removed) row["Operation"] = "DELETED";

            var updated = lastRows.Where(row => previousDict.ContainsKey(row["Id"]) && !row.ItemArray.SequenceEqual(previousDict[row["Id"]].ItemArray)).ToList();
            foreach (var row in updated) row["Operation"] = "UPDATED";
            
            diff[table].AddRange(added);
            diff[table].AddRange(removed);
            diff[table].AddRange(updated);
        }

        return diff;
    }
}
