@page "/"
@using System.Data
@using Lapo.Mud.Dialogs
@using Lapo.Mud.Services

<PageTitle>Home</PageTitle>

<div class="d-flex d-flex-row gap-2 justify-content-between">
    
    @if (_progress)
    {
        <MudButton Disabled="true" FullWidth="true" Variant="Variant.Outlined" ButtonType="ButtonType.Button"StartIcon="@Icons.Material.Outlined.Search" Color="Color.Primary">
            <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
            <MudText Class="ml-2">Processing</MudText>
        </MudButton>
    }
    else
    {
        <MudButton @onclick="RunScanAsync" FullWidth="true" Variant="Variant.Outlined" ButtonType="ButtonType.Button" StartIcon="@Icons.Material.Outlined.Search" Color="Color.Primary">
            Scan
        </MudButton>
    }

    <MudButton @onclick="BackupAndDeleteReportAsync" FullWidth="true" Variant="Variant.Outlined" ButtonType="ButtonType.Button" StartIcon="@Icons.Material.Outlined.Delete" Color="Color.Secondary">
        Backup & Delete Report
    </MudButton>
    
</div>

@if (_diff.Count == 0)
{
    <MudText Typo="Typo.h6">No changes detected</MudText>
}
else
{
    @foreach (var tableName in _items.Keys)
    {
        <MudText Typo="Typo.h4" Class="mt-5">@tableName</MudText>

        <MudDataGrid Items="@_items[tableName]" T="IDictionary<string, object>" Filterable="true" Dense="true"
                     Hover="true" Bordered="true">
            <Columns>
                @foreach (var column in _columns[tableName])
                {
                    <PropertyColumn Title="@column.Key" Property="@(TableService.GetPropertyLambdaExpression<IDictionary<string, object>, object>(column.Key))"/>
                }
            </Columns>
            <PagerContent>
                <MudDataGridPager T="IDictionary<string, object>"/>
            </PagerContent>
        </MudDataGrid>
    }
}

@code
{
    [Inject] ConfigurationService ConfigurationService { get; set; } = null!;
    [Inject] CsvService CsvService { get; set; } = null!;
    [Inject] MarkdownService MarkdownService { get; set; } = null!;
    [Inject] DatabaseService DatabaseService { get; set; } = null!;
    [Inject] AluService AluService { get; set; } = null!;
    [Inject] TableService TableService { get; set; } = null!;
    [Inject] ILogger<Home> Logger { get; set; } = null!;
    [Inject] IDialogService DialogService { get; set; } = null!;

    readonly Dictionary<string, DataTable> _lastScan = [];
    Dictionary<string, DataTable> _previousScan = [];
    Dictionary<string, List<DataRow>> _diff = [];
    Dictionary<string, List<Dictionary<string, object>>> _items = new(); // Grid data
    Dictionary<string, Dictionary<string, Type>> _columns = new(); // Dynamic columns
    
    private bool _progress;
    
    protected override Task OnInitializedAsync() => RunScanAsync();

    async Task RunScanAsync()
    {
        _progress = true;
        await Task.Run(async () => await ScanAsync());
        _progress = false;
    }

    async Task ScanAsync()
    {
                _lastScan.Clear();

                var configs = await ConfigurationService.ReadAsync<List<Configuration.TableConfig>>("Tables") ?? [];
                foreach (var config in configs)
                {
                    var rows = await DatabaseService.QueryAsync(config.Table, config.Where, config.Top, config.Direction);
                    _lastScan.Add(config.Table, rows);
                }

                if (!_previousScan.Any())
                {
                    _previousScan = new(_lastScan);
                    Logger.LogInformation("First scan");

                    return;
                }

                _diff.Clear();
                _diff = AluService.LoadDiff(_previousScan, _lastScan);
                
                Logger.LogInformation("Changes detected");

                var (newGridData, newColumns) = TableService.BuildTable(_diff);
                _items = newGridData;
                _columns = newColumns;
                
                Logger.LogInformation("Grid data and columns built");
                
                CsvService.Write(_diff);
                await MarkdownService.WriteAsync(_diff);
                
                Logger.LogInformation("CSV written");

                _previousScan.Clear();
                AluService.ClearDataTable(_lastScan);
                _previousScan = new(_lastScan);
                
                Logger.LogInformation("Previous scan updated");
    }
    
    private async Task BackupAndDeleteReportAsync()
    {
        var parameters = new DialogParameters<AlertDialog>
        {
            { x => x.ContentText, "Do you really want to backup and delete report file?" },
            { x => x.ButtonText, "Backup and Delete" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<AlertDialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result?.Canceled ?? true)
        {
            
            CsvService.Backup();
            CsvService.Delete();
            
            MarkdownService.Backup();
            MarkdownService.Delete();
        }
    }
}
